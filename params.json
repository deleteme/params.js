{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Params.js","tagline":"params.js takes the suck out of window.location.search.","body":"Params.js takes the suck out of window.location.search.\r\n\r\nParams.js is class that has an API for getting, setting, and unsetting URL query params\r\nwithout destroying any existing query params.\r\n\r\nIt doesn't do anything fancy like serializing nested objects or attempting to\r\npreserve a particular param order.\r\n\r\n### Building\r\n\r\nTo watch the coffee file for changes and build the js:\r\n\r\n`coffee -wcb params.coffee`\r\n\r\n### Testing\r\n\r\nTesting uses vows. `npm install vows -g` then run `vows`.\r\n\r\n### API\r\n\r\nFirst, make an instance of `Params`. By default, it uses window.location, but\r\nyou can pass an object the constructor that resembles 'window.location'.\r\n\r\n```javascript\r\n// plain\r\nvar params = new Params();\r\n\r\n// with a stubbed location object\r\nvar stubbedLocation = {\r\n  href: cheapcadaversURL,\r\n  search: \"?rick=moranis&bumblebee=tuna&hash[some_key]=someValue\",\r\n  protocol: \"http:\",\r\n  host: \"www.cheapcadavers.com\",\r\n  pathname: \"/\"\r\n};\r\nvar fakedParams = new Params(stubbedLocation);\r\n```\r\n\r\n### Instance Methods\r\n\r\n#### get(key)\r\n\r\nReturns the value of the key\r\n\r\n#### set(object or key, value)\r\n\r\nIf an object is the argument, then it will copy all of the object's\r\nproperties to the params.\r\n\r\nIf a key and value is passed, then it will make a new param with the given\r\nkey and value.\r\n\r\nIt returns the params object, making it chainable.\r\n\r\n#### unset(key)\r\n\r\nRemoves the key and value pair from the params.\r\n\r\nIt returns the params object, it's also chainable.\r\n\r\n#### href()\r\n\r\nReturns a string that is a full URL, similar to window.location.href.\r\n\r\n#### search()\r\n\r\nReturns a string that is just the params, in a serialized form, similar to\r\nwindow.location.search.\r\n\r\n#### object()\r\n\r\nReturns a shallow copy of the internal _params object.\r\n\r\n#### validate(string)\r\n\r\nUseful to test if the given string resembles a valid location.search object.\r\nReturns true if it passes.\r\n\r\n### Static Methods\r\n\r\n#### Params.parse(string)\r\n\r\nCreates and returns an object from the query params in the string.\r\n\r\n### Change Log:\r\n\r\n**v0.6.0** - _November 7, 2012_ - Converts test suite from qunit to vows. Added the ability to save arrays, serialize arrays like: `foo=a&foo=b`, and `Params.parse` can interpret serialized arrays.\r\n\r\n**v0.5.1** - _April 10, 2012_ - `Params.parse` will call decodeURIComponent on values.\r\n\r\n**v0.5.0** - _November 29, 2011_ - `set` and `unset` methods return the params object, making it chainable.\r\n\r\n**v0.4.0** - _September 26, 2011_ - Added `object()` instance method to return an object of the params.\r\n\r\n**v0.3.1** - _September 14, 2011_ - `Params.parse()` returns an empty object if it gets an empty string.\r\n\r\n**v0.3.0** - _September 14, 2011_ - Using prototypes instead of closures to reduce memory footprint. Added `Params.parse()` static method.\r\n\r\n**v0.2.1** - _August 17, 2011_ - Added `validate()` instance method.\r\n","google":"UA-79467-10"}